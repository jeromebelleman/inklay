#! /usr/bin/env python

'''
Show layers and export PNGs or PDFs
'''

import sys
import os
import argparse
import tempfile
import subprocess
import xml.etree.ElementTree as ET
import string
import yaml

LAYER = ".//{http://www.w3.org/2000/svg}g[@{http://www.inkscape.org/namespaces/inkscape}groupmode='layer']"
SHOWN = ".//{http://www.w3.org/2000/svg}g[@{http://www.inkscape.org/namespaces/inkscape}label='%s']"
COULDNT = "Couldn't find layer labelled '%s'"
UNSUPPORTED = "%s: unsupported export format"

# Should the order of laysets be dictated by the layer order?  No. Because a
# given layset may comprise e.g. a layer that comes first and a layer that
# comes last. What then should the order be?

# Should a specifying layer mean including all its children? No. Because
# there may be reasons why some of the children should never been shown
# (like hiding reference images).

def show(layer):
    '''
    Show layer
    '''

    layer.set('style', 'display:inline')

def main():
    '''
    Main
    '''

    parser = argparse.ArgumentParser(
        description="Show layers and export PNGs, JPGs or PDFs.",
    )
    parser.add_argument('cfg', help="configuration YAML file")
    parser.add_argument('inkscape', help="Inkscape SVG file")
    parser.add_argument('outdir', help="output directory")
    parser.add_argument('layerset', nargs='*',
                        help="only compose this layer set")
    parser.add_argument('-n', '--dryrun', action='store_true',
                        help="don't run Inkscape")
    parser.add_argument('-v', '--verbose', action='store_true',
                        help="show Inkscape command run")
    parser.add_argument('-f', '--force', action='store_true',
                        help="force composing again even if nothing changed")
    args = parser.parse_args()

    with open(os.path.expanduser(args.cfg)) as fhl:
        cfg = yaml.load(fhl)

    devnull = open(os.devnull, 'w')

    outdir = os.path.expanduser(args.outdir)

    # Check if anything changed
    mtime = 0
    for entry in os.listdir(outdir):
        newmtime = os.path.getmtime('%s/%s' % (outdir, entry))
        mtime = newmtime if newmtime > mtime else mtime
    if not args.force:
        if mtime > os.path.getmtime(args.cfg) and \
             mtime > os.path.getmtime(args.inkscape):
            return

    # Choose layer sets
    if args.layerset:
        laysets = []
        for layset in cfg['laysets']:
            name = [name for name in layset.keys()
                if 'name' != 'useprevious'][0]
            if name in args.layerset:
                laysets.append(layset)
    else:
        laysets = cfg['laysets']

    previ = 0
    offset = 0
    for i, layset in enumerate(laysets):
        if len(layset.keys()) > 1:
            for key in layset:
                if key not in ('number',):
                    break
        else:
            key = layset.keys()[0]
        print "Composing %s" % key

        # Parse XML
        tree = ET.parse(os.path.expanduser(args.inkscape))

        # Hide all layers
        for layer in tree.findall(LAYER):
            layer.set('style', 'display:none')

        # Show common layers
        if 'common' in cfg['cfg']:
            for label in cfg['cfg']['common']:
                for layer in tree.findall(SHOWN % label):
                    if layer is not None:
                        show(layer)
                    else:
                        print >> sys.stderr, COULDNT % label

        # Show layers dictated by layer set
        if layset[key]:
            for label in layset[key]:
                for layer in tree.findall(SHOWN % label):
                    if layer is not None:
                        show(layer)
                    else:
                        print >> sys.stderr, COULDNT % label
        else:
            for layer in tree.findall(SHOWN % key):
                if layer is not None:
                    show(layer)
                else:
                    print >> sys.stderr, COULDNT % key

        # Write temporary Inkscape file
        tmp = tempfile.NamedTemporaryFile()
        xml = ET.tostring(tree.getroot())
        try:
            if len(layset.keys()) > 1 and 'number' in layset:
                if layset['number'] == 'previous':
                    previ += 1
                else:
                    offset = layset['number'] - (i + 1 - previ)
            xml = string.Template(xml).substitute(number=i + 1 - previ + offset)
        except KeyError:
            pass
        tmp.write(xml)
        tmp.flush()

        # Prepare Inkscape arguments
        try:
            arguments = ['inkscape']

            if cfg['cfg']['format'] in ('png', 'pdf'):
                fmt = cfg['cfg']['format']
            elif cfg['cfg']['format'] == 'jpg':
                fmt = 'png'
            else:
                print >> sys.stderr, UNSUPPORTED % cfg['cfg']['format']
                return 1

            if 'number' in cfg['cfg'] and cfg['cfg']['number']:
                arguments.append('--export-%s=%s/%03d-%s.%s' % (
                    fmt,
                    outdir,
                    i,
                    key,
                    # Leave extension to jpg if that's what it is
                    cfg['cfg']['format'],
                ))
            else:
                arguments.append('--export-%s=%s/%s.%s' % (
                    fmt,
                    outdir,
                    key,
                    cfg['cfg']['format'],
                ))

            if fmt in ('png', 'jpg'):
                if 'dpi' in cfg['cfg']:
                    arguments.append('--export-dpi=%d' % cfg['cfg']['dpi'])
                arguments.append('--export-width=%s' % cfg['cfg']['width'])
            elif fmt == 'pdf':
                # Not the default in spite of what the manpage says
                if 'export-area-drawing' in cfg['cfg'] \
                    and cfg['cfg']['export-area-drawing']:
                    arguments.append('--export-area-drawing')
                else:
                    arguments.append('--export-area-page')
                arguments.append('--export-pdf-version=1.5')
                if 'text-to-path' in cfg['cfg'] and cfg['cfg']['text-to-path']:
                    arguments.append('--export-text-to-path')
        except KeyError, exc:
            print >> sys.stderr, "Missing field %s in %s" % (exc, args.cfg)
            return 1
        arguments.append(tmp.name)

        # Run Inkscape
        if args.verbose:
            print ' '.join(arguments)
        if not args.dryrun:
            subprocess.call(arguments, stderr=devnull)

        # Run GraphicsMagick if needs be
        if cfg['cfg']['format'] == 'jpg':
            subprocess.call(['gm',
                'convert',
                '%s/%s.%s' % (outdir, key, cfg['cfg']['format']),
                '%s/%s.%s' % (outdir, key, cfg['cfg']['format']),
                ])

if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        pass
