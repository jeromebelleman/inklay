#! /usr/bin/env python

'''
Show layers and export PNGs or PDFs
'''

import sys
import os
import argparse
import tempfile
import subprocess
import xml.etree.ElementTree as ET
import yaml

LAYER = ".//{http://www.w3.org/2000/svg}g[@{http://www.inkscape.org/namespaces/inkscape}groupmode='layer']"
SHOWN = ".//{http://www.w3.org/2000/svg}g[@{http://www.inkscape.org/namespaces/inkscape}label='%s']"
COULDNT = "Couldn't find layer labelled '%s'"

def show(layer):
    '''
    Show layer
    '''

    layer.set('style', 'display:inline')

def main():
    '''
    Main
    '''

    parser = argparse.ArgumentParser(
        description="Show layers and export PNGs or PDFs.",
    )
    parser.add_argument('cfg', help="configuration YAML file")
    parser.add_argument('inkscape', help="Inkscape SVG file")
    parser.add_argument('outdir', help="output directory")
    parser.add_argument('-n', '--dryrun', action='store_true',
                        help="don't run Inkscape")
    parser.add_argument('-v', '--verbose', action='store_true',
                        help="show Inkscape command run")
    args = parser.parse_args()

    with open(args.cfg) as fhl:
        cfg = yaml.load(fhl)

    devnull = open(os.devnull, 'w')

    laysets = set()
    for layset in cfg['laysets']:
        print "Composing %s" % layset

        # Warn if a layset already exists under another name
        laylist = ','.join(cfg['laysets'][layset])
        if laylist in laysets:
            print >> sys.stderr, "%s's %s already exists" % (layset, laylist)
        laysets.add(laylist)

        # Parse XML
        tree = ET.parse(args.inkscape)

        # Hide all layers
        for layer in tree.findall(LAYER):
            layer.set('style', 'display:none')

        # Show common layers
        if 'common' in cfg['cfg']:
            for label in cfg['cfg']['common']:
                for layer in tree.findall(SHOWN % label):
                    if layer is not None:
                        show(layer)
                    else:
                        print >> sys.stderr, COULDNT % label

        # Show layers dictated by layer set
        for label in cfg['laysets'][layset]:
            for layer in tree.findall(SHOWN % label):
                if layer is not None:
                    show(layer)
                else:
                    print >> sys.stderr, COULDNT % label

        # Write temporary Inkscape file
        tmp = tempfile.NamedTemporaryFile()
        tree.write(tmp.name)

        # Prepare Inkscape arguments
        try:
            arguments = [
                'inkscape',
                '--export-%s=%s/%s.%s' % (
                    cfg['cfg']['format'],
                    args.outdir,
                    layset,
                    cfg['cfg']['format'],
                )
            ]
            if cfg['cfg']['format'] == 'png':
                arguments.append('--export-width=%s' % cfg['cfg']['width'])
            elif cfg['cfg']['format'] == 'pdf':
                # Not the default in spite of what the manpage says
                arguments.append('--export-area-page')
                arguments.append('--export-pdf-version=1.5')
                if 'text-to-path' in cfg['cfg'] and cfg['cfg']['text-to-path']:
                    arguments.append('--export-text-to-path')
        except KeyError, exc:
            print >> sys.stderr, "Missing field %s in %s" % (exc, args.cfg)
            return 1
        arguments.append(tmp.name)

        # Run Inkscape
        if args.verbose:
            print ' '.join(arguments)
        if not args.dryrun:
            subprocess.call(arguments, stderr=devnull)

if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        pass
